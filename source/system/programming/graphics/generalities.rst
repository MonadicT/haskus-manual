==============================================================================
Generalities
==============================================================================

------------------------------------------------------------------------------
What is a pixel?
------------------------------------------------------------------------------

From a programmer's point of view, screens basically display rectangular grids
of sample points (or "pixels" standing for "picture elements") where each point
can have a different color. The display resolution is the number of pixels in
each dimension: for example, a display resolution of 1920x1080 means that there
are 1920 pixels in the horizontal dimension and 1080 in the vertical dimension.

.. note::

   On some hardware, we may also use `sub-pixel rendering
   <https://en.wikipedia.org/wiki/Subpixel_rendering>`_: pixel colors are
   generated by blending several sub-pixel colors. If we know the physical
   layout of these sub-pixels, we may want to precisely select the sub-pixel
   colors to enhance the overall output.

------------------------------------------------------------------------------
Graphics hardware overview
------------------------------------------------------------------------------

There can be a lot of different hardware configurations.  It is common to have
computers with multiple connected display devices: multi-screens,
video-projector, TV, etc. Each display supports its own modes of operation
(display resolution, refresh rates, etc.). Besides, we may want each device to
display something different or some of them to display the same thing ("clone"
mode): in the latter case, what if the display resolutions or the other mode
settings are different?

It is also possible to have several graphic cards in the same computer:

* each card can provide its own set of output display ports;

* several cards may be physically connected together to accelerate the display
  on one of their display ports;

* several cards may be connected to the same output connectors and the system
  can switch between the different graphic cards. Usually there are two cards: a
  power-consuming performant one and a less power-consuming basic one used to
  save power.

------------------------------------------------------------------------------
"Software" rendering (i.e. on the CPU)
------------------------------------------------------------------------------

In this chapter we present a simple approach to display rendering: basically the
picture to display is generated by the CPU in host memory and then transferred
to the GPU memory (implicitly by using memory mapping). Most recent graphic
cards propose more efficient approaches: the picture to display is generated and
transformed directly by the graphic card. Instead of sending a picture, the host
sends commands or programs to be executed by the GPU.


.. note::

   Currently Linux doesn't propose a unified interface to advanced graphic card
   capabilities from different vendors (these are usually handled by MESA in
   user-space and accessed through the OpenGL interface). ``haskus-system``
   doesn't provide support for them yet.


------------------------------------------------------------------------------
Proprietary drivers
------------------------------------------------------------------------------

``haskus-system`` uses the Kernel Mode Setting (KMS) and the Direct
Rendering Manager (DRM) interfaces. In usual Linux distributions, some graphic
card manufacturers provide closed-source proprietary drivers that do not support
theses interfaces: they use a kernel module and user-space libraries that
communicate together by using a private protocol. The user-space libraries
provide implementations of standard high-level interfaces such as OpenGL and can
be used by rendering managers such as X.org. ``haskus-system`` doesn't offer a
way to use these drivers.

